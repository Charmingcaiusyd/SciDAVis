---
title: Coding
in_menu: true
---

h1. Where to start, or: Where's the bleeding edge?

If you've already had a look at our SVN repository, you'll probably be wondering about the age of
the trunk. The reason is that bleeding-edge development is happening in collaboration with and
in the repository (directory: 2.0) of "LabPlot":http://www.sourceforge.net/projects/labplot.
In order to check out the latest version using the SVN command-line client, issue the following
command:
{coderay:: {lang: plaintext, line_numbers: false}} svn co https://labplot.svn.sourceforge.net/svnroot/labplot/2.0 scidavis {coderay}
The collobaration has been featured on "KDE.NEWS (aka The Dot)":http://dot.kde.org/2009/10/16/labplot-and-scidavis-collaborate-future-free-scientific-plotting
and there's a "Wiki":http://sourceforge.net/apps/mediawiki/labplot/index.php?title=Developer
with some summaries of our plans and designs.

Our current stable version (i.e. the one from which snapshots are taken for maintenance releases)
can be checked out out using
{coderay:: {lang: plaintext, line_numbers: false}} svn co https://scidavis.svn.sourceforge.net/svnroot/scidavis/branches/current_stable scidavis {coderay}

h1. Getting started

If you're already familiar with C++, Qt and Doxygen, you can safely skip this section;
although if you do have a minute, scanning it for bits you don't know yet won't hurt.

h2. C++

SciDAVis is written in the C++ language (not counting some lines of Python code in scidavisrc.py
and scidavisUtil.py). This means that fixing bugs and adding sophisticated new features, i.e.
anything not (yet) possible with Python, requires at least basic knowledge of C++.

If you want to learn C++, or you're looking for a reference, here's some links that might help you:

* "C++ Language Tutorial":http://www.cplusplus.com/doc/tutorial
* "Programming Tutorials":http://www.cprogramming.com/tutorial.html (including ??C++ Made Easy??)
* "C++ Programming Wikibook":http://en.wikibooks.org/wiki/C%2B%2B_Programming
* "C++ FAQ Lite":http://www.parashift.com/c++-faq-lite
* "FreeNode ##C++ Wiki":http://jcatki.no-ip.org/fncpp (read this before asking questions on the ##C++ IRC channel)
* "&lt;/dream-in-code&gt;":http://www.dreamincode.net (tutorials and forums)

Naturally, we can't list every link for a popular topic like C++.
Plus, there's lots and lots of books about C++ like ??Thinking in C++?? by Bruce Eckel,
??You Can Program in C++: A Programmer's Introduction?? by Francis Glassborow
or ??Using C++: An Introduction to Programming?? by Julien Hennefeld, Laura Baker, and Charles Burchard.
I haven't read any of those, but they've received good ratings on Amazon.com. :-)

If you're a self-learner, the above should be enough to get you going.
If not, and books or online resources don't help, please understand that as much as we would value
your contribution, we can't take you by the hand and teach you C++ or how to program.
Also, if you're looking for a forum on C++ in general, asking Google for "C++ forum" will give you
a lot to choose from.
That said, you're welcome to ask questions, including newbie questions, directly related to developing
SciDAVis on our mailing list.

h2. Qt

SciDAVis makes extensive use of the "Qt library":http://trolltech.com/products/qt developed
by "Trolltech":http://trolltech.com. We're using it for platform abstraction, signals and slots,
the user interface and more; so there's hardly any part of the code you can understand
without knowing about Qt. Luckily, Qt comes with an excellent
"documentation":http://doc.trolltech.com/4.3/index.html (also available locally after you've
installed Qt).
Additionally, there's a large and active community around Qt, see for example the
"Qt Centre":http://www.qtcentre.org, "QtForum.org":http://www.qt-forum.org or this "list of OpenSource Qt Applications":http://www.qt-apps.org.

h2(#doxygen). Doxygen

Documenting your code is important, both for maintaining it over any length of time and for helping
other developers understand what you've done. We're using "Doxygen":http://www.doxygen.org to make
this task as easy as possible. Not all of the legacy code is documented yet, but we're continually
improving the situation and we're documenting everything we add. Obviously, any help with this is
highly welcome. :-)

As an absolute minimum, you should add short descriptions to class and method declarations as follows:

<webgen:block name="doxygen_short" />

Adding some more information is often a good idea, especially when you've put a lot of thought
into the design of an interface. Writing down what's on your mind is a lot easier for you than it is
for others (or for yourself half a year later) to re-think everything. Here's how:

<webgen:block name="doxygen_long" />

For more information on the syntax and advanced usage, please refer to the
"Doxygen manual":http://www.stack.nl/~dimitri/doxygen/manual.html (also available locally after
installing Doxygen).

h2. API documentation

As explained above, we're trying to document the code using "Doxygen":http://www.doxygen.org.
The API documentation can be read online, both for the
<a href="../contributing/API/stable/index.html">stable</a> and for the
<a href="../contributing/API/unstable/index.html">unstable</a> development version. Or you can
generate them for yourself in several different formats by obtaining the source, going to the
directory containing the Doxyfile and running Doxygen there. By default, the result will be
accesible via API/html/index.html.

h1. Before you start

Before seriously starting to work on a large improvement to SciDAVis, you should announce your
plans on the "mailing list":https://lists.sourceforge.net/lists/listinfo/scidavis-contributors.
This is in your own interest: someone else could already be working on your idea, or
later start working on it without knowing about your plans, or it might be foreseeable that
your code will be invalidated by someone else's changes. In short, you risk wasting your
time if you don't coordinate your work with the rest of us.

h1. Contributing code and joining the team

If you just want to submit a bugfix or contribute an occasional enhancement, submit your patch
"here":https://sourceforge.net/tracker/?group_id=199120&atid=968216.
Either you have an IDE or graphical diff tool for this, or
(for Linux, possibly also MacOS X and "cygwin":http://cygwin.com/) you
do

{coderay:: {lang: plaintext, line_numbers: false}} diff -uNr file-or-dir.orig file-or-dir.changed > your.patch {coderay}

in a terminal. This means you have to keep around a copy of the unchanged file or directory.
It's easier when you're checking out the source from our
"subversion repository":https://sourceforge.net/svn/?group_id=199120,
which has the additional benefit that it contains the changes we made since the last release.
That is, before you start, you do

{coderay:: {lang: plaintext, line_numbers: false}} svn co https://scidavis.svn.sourceforge.net/svnroot/scidavis/trunk scidavis {coderay}

then you do your changes, finally generating the patch as follows:

{coderay:: {lang: plaintext, line_numbers: false}} svn diff > your.patch {coderay}

If you're planning to contribute on a regular basis and you'd like to join the team,  introduce yourself and your plans on the
"mailing list":https://lists.sourceforge.net/lists/listinfo/scidavis-contributors or contact project member 
"directly":http://scidavis.sourceforge.net/contact.html.
If you want to participate in the bleeding-edge development, the appropriate place to go is the
"labplot mailing list":https://lists.sourceforge.net/lists/listinfo/labplot-devel.

--- name:doxygen_short pipeline:tags
{coderay:: c++}//! A computer built by pan-dimensional, hyper-intelligent beings known to men as mice.
class DeepThought
{
public:
	//! Return the ultimate answer to life, the universe and everything.
	int calculateAnswer() const {
		sleep(7.5e6*365*24*60*60);
		return 42;
	}
};
{coderay}

--- name:doxygen_long pipeline:tags
{coderay:: c++}//! A computer built by pan-dimensional, hyper-intelligent beings known to men as mice.
/**
 * Here's where you can elaborate on the usage and design ideas of your class, provide
 * usage examples etc.
 */
class DeepThought
{
public:
	//! Return the ultimate answer to life, the universe and everything.
	/**
	 * Additional information about the method, its arguments and its return value.
	 */
	int calculateAnswer() const {
		sleep(7.5e6*365*24*60*60);
		return 42;
	}
};
{coderay}
